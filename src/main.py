from telegram.ext import ConversationHandler
import telebot
from telebot import types
import sqlite3
import os
import datetime
import requests
import json
import logging
import time
from dotenv import load_dotenv

#–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YandexGPT ---
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
YANDEX_GPT_MODEL = os.getenv('YANDEX_GPT_MODEL')

# --- –∫–æ–Ω—Ñ–∏–≥ hh ---
HH_API_URL = os.getenv('HH_API_URL')
HH_COMPANY_ID = os.getenv('HH_COMPANY_ID')

# URL API YandexGPT
YANDEX_GPT_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
YANDEX_HEADERS = {
    "Authorization": f"Bearer {YANDEX_API_KEY}",  
    "x-folder-id": YANDEX_FOLDER_ID,
    "Content-Type": "application/json"
}

API_TOKEN = os.getenv('API_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

DATABASE_NAME = os.getenv('DATABASE_NAME')

#—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–¥–π
conn = None
cursor = None

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–æ–º–∞–Ω–¥ –∏ –¢–µ–∫—Å—Ç–∞ 
@bot.message_handler(commands=["start"])
def handle_start(message):
    if not cursor or not conn: # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        bot.send_message(message.chat.id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 
    try:
        with open("src/RODANIKA.jpg", "rb") as photo:
            # –¢–µ–∫—Å—Ç –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            caption = """
            <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Rodanika!</b>
            <b>–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–∞–¥—Ä–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.</b>
            """
            caption = "\n".join(line.strip() for line in caption.splitlines())  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (parse_mode –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞)
            bot.send_photo(
                chat_id = message.chat.id,
                photo = photo,
                caption = caption,
                parse_mode = "HTML"
            )
            
    except FileNotFoundError:
        print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 'src/RODANIKA.jpg' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        bot.send_message(
        message.chat.id,
       bot.send_message(
       message.chat.id,
            f"<b>–ü—Ä–∏–≤–µ—Ç, {registered_name}!</b>\n–Ø HR-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Rodanika. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            parse_mode="HTML",
            reply_markup=main_reply_markup)
)
    telegram_id = message.from_user.id
    first_name = message.from_user.first_name if message.from_user.first_name else "–ì–æ—Å—Ç—å" # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    username = message.from_user.username

    try:
        cursor.execute("SELECT registered_name FROM users WHERE telegram_id = ?", (telegram_id,))
        user_data = cursor.fetchone()

        if user_data and user_data[0]: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ registered_name –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            registered_name = user_data[0]
            bot.send_message(
            message.chat.id,
                f"<b>–ü—Ä–∏–≤–µ—Ç, {registered_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</b>",
                parse_mode="HTML",
                reply_markup=main_reply_markup
)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –∏–º—è –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ, –∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("""
                INSERT INTO users (telegram_id, first_name, username)
                VALUES (?, ?, ?)
                ON CONFLICT(telegram_id) DO UPDATE SET
                first_name = excluded.first_name,
                username = excluded.username
            """, (telegram_id, first_name, username))
            conn.commit()
            bot.send_message(message.chat.id,
                             f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Rodanika. "
                             "–ß—Ç–æ–±—ã —è –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ, –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç (–∏–º—è –∏–ª–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)?")
            bot.register_next_step_handler(message, process_name_step)
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ SQLite –≤ /start: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_name_step(message):
    if not cursor or not conn:
        bot.send_message(message.chat.id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    try:
        telegram_id = message.from_user.id
        registered_name = message.text.strip()

        if not registered_name: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
            bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
            bot.register_next_step_handler(message, process_name_step)
            return

        if registered_name.startswith('/'): # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∏–º—è –Ω–µ –±—ã–ª–æ –∫–æ–º–∞–Ω–¥–æ–π
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
            bot.register_next_step_handler(message, process_name_step)
            return

        cursor.execute("UPDATE users SET registered_name = ? WHERE telegram_id = ?", (registered_name, telegram_id))
        conn.commit()
        bot.send_message(message.chat.id,
                         f"–û—Ç–ª–∏—á–Ω–æ, {registered_name}! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à–µ –∏–º—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                         reply_markup=main_reply_markup) # –ü–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ SQLite –≤ process_name_step: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_name_step: {e}")
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.message_handler(func=lambda message: message.text.lower() in ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç!', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', 'hi', 'hello'])
def handle_greeting(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    greeting_text = f"""
<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b> üëã

–Ø HR-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Rodanika. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:
"""
    bot.send_message(message.chat.id, greeting_text, parse_mode="HTML")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    try:
        with open("src/RODANIKA.jpg", "rb") as photo:
            bot.send_photo(message.chat.id, photo)
    except FileNotFoundError:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_reply_markup
    )

def create_back_button_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥")
    keyboard.add(back_button)
    return keyboard

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö 
def init_db():
    global conn, cursor
    conn = sqlite3.connect(DATABASE_NAME, check_same_thread=False)
    cursor = conn.cursor()
#—Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        first_name TEXT,
        username TEXT,
        registered_name TEXT
    )
""")
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS document_requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        document_type TEXT NOT NULL,
        additional_info TEX
                   T,
        status TEXT DEFAULT 'pending',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        estimated_completion TEXT,
        FOREIGN KEY(user_id) REFERENCES users(telegram_id)
    )
    """)
    

  
# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS news (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        hr_id INTEGER NOT NULL,
        title TEXT NOT NULL,
        content TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(hr_id) REFERENCES users(telegram_id)
    )
    """)

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS news_subscribers (
        user_id INTEGER PRIMARY KEY,
        subscribed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(telegram_id)
    )
    """)

#–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–∞–≤ HR 
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS hr_rights (
        user_id INTEGER PRIMARY KEY,
        granted_by INTEGER,
        grant_date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(telegram_id)
    )
""")
#–¢–∞–±–ª–∏—Ü–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS broadcasts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        hr_id INTEGER NOT NULL,
        message TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
""")

# –¢–∞–±–ª–∏—Ü–∞ FAQ
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS faq (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        keywords TEXT, /* –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ */
        question TEXT UNIQUE,
        answer TEXT
        )
    """)

# –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS feedback (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        rating INTEGER NOT NULL,
        comments TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(telegram_id)
    )
    """)

#–¢–∞–±–ª–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–∏    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            vacancy_id TEXT NOT NULL,
            answers TEXT NOT NULL,
            applied_at DATETIME NOT NULL,
            FOREIGN KEY(user_id) REFERENCES users(telegram_id)
        )
    """)
    
       
    conn.commit()
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DATABASE_NAME}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")

#–ö–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT API 
def ask_yandex_gpt(prompt, temperature=0.5):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT
    :param prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    :param temperature: –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (0-1)
    :return: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ None
    """
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-lite",     
        "completionOptions": {
            "temperature": temperature,
            "maxTokens": "2000"
        },
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Rodanika. –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."
            },
            {
                "role": "user",
                "text": prompt
            }
        ]
    }

    try:
        response = requests.post(
            YANDEX_GPT_URL,
            headers=YANDEX_HEADERS,
            json=data,
            timeout=30
        )
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("Request Data:", json.dumps(data, indent=2, ensure_ascii=False))
        print("Status Code:", response.status_code)
        print("Response:", response.text)
        
        response.raise_for_status()
        result = response.json()
        
        return result['result']['alternatives'][0]['message']['text']
        
    except Exception as e:
        print(f"YandexGPT Error: {str(e)}")
        return None


def generate_feedback_report(rating, comments):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø–æ–º–æ—â—å—é YandexGPT"""
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ —Å–æ—Å—Ç–∞–≤—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è HR.
    –û—Ü–µ–Ω–∫–∞: {rating}/5
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comments}
    
    –í –æ—Ç—á–µ—Ç–µ —É–∫–∞–∂–∏:
    1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã
    2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
    3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    4. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    –û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (–Ω–µ –±–æ–ª–µ–µ 200 —Å–ª–æ–≤).
    """
    
    gpt_response = ask_yandex_gpt(prompt)
    
    if gpt_response:
        return f"""üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω YandexGPT):
{gpt_response}"""
    else:
        # –§–æ–ª–±—ç–∫ –µ—Å–ª–∏ GPT –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
        sentiment = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π" if rating >=4 else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π" if rating ==3 else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"
        return f"""üìä –ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç:
- –û—Ü–µ–Ω–∫–∞: {rating}/5
- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {sentiment}
- –î–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {len(comments.split())} —Å–ª–æ–≤"""


def add_faq_entry(keywords, question, answer):
    if not cursor or not conn:
        print("–û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ.")
        return
    try:
        cursor.execute("INSERT INTO faq (keywords, question, answer) VALUES (?, ?, ?)",
                       (keywords, question, answer))
        conn.commit()
        print(f"–î–æ–±–∞–≤–ª–µ–Ω FAQ: {question[:40]}...")
    except sqlite3.IntegrityError:
        print(f"FAQ '{question[:40]}...' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.") 
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ FAQ: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (ReplyKeyboardMarkup)
main_reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
main_reply_markup.add(
    types.KeyboardButton("–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì"),
    types.KeyboardButton("–í–∞–∫–∞–Ω—Å–∏–∏ üè¢"),
    types.KeyboardButton("–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üöÄ"),
    types.KeyboardButton("–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üõ†"),
    types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üìã"),
    types.KeyboardButton("–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? ü¶æ"),
    #types.KeyboardButton("–ü–æ–º–æ—â—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞ ü§ù"),
    types.KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ HR üì¢"),
    types.KeyboardButton("–ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏/–¥–æ–∫—É–º–µ–Ω—Ç–∞ üìÑ")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç (–ø—Ä–∏–º–µ—Ä)
inline_markup_website = types.InlineKeyboardMarkup()
inline_markup_website.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏ üåê", url="https://rodanika.ru/"))

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def handle_back(message):
    bot.send_message(
        message.chat.id,
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_reply_markup
    )




# –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –Ω–∞ hh.ru
class VacancyManager:
    @staticmethod
    def get_vacancies():
        try:
            params = {
                'employer_id': HH_COMPANY_ID,
                'per_page': 10,
                'page': 0,
                'only_with_salary': True
            }
            response = requests.get(HH_API_URL, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            if 'items' not in data:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API HH.ru:", data)
                return []
                
            return data.get('items', [])
            
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")
            return []
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞")
            return []
        
    @staticmethod
    def format_vacancy(vacancy):
        salary = vacancy.get('salary') or {}
        salary_str = ""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
        if salary.get('from') or salary.get('to'):
            parts = []
            if salary.get('from'): parts.append(f"–æ—Ç {salary['from']}")
            if salary.get('to'): parts.append(f"–¥–æ {salary['to']}")
            salary_str = " ".join(parts) + f" {salary.get('currency', '')}"
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ snippet
        snippet = vacancy.get('snippet', {})
        
        return f"""
    <b>{vacancy.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>
    üè¢ {vacancy.get('employer', {}).get('name', '')}
    üìç {vacancy.get('area', {}).get('name', '')}
    üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_str if salary_str else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
    üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {vacancy.get('published_at', '')[:10]}
    üìå {snippet.get('requirement', '')}
    üîó <a href="{vacancy.get('alternate_url', '#')}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ hh.ru</a>
    """

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
@bot.message_handler(func=lambda message: message.text == "–í–∞–∫–∞–Ω—Å–∏–∏ üè¢")
def handle_vacancies(message):
    try:
        vacancies = VacancyManager.get_vacancies()
        
        if not vacancies:
            bot.send_message(
                message.chat.id, 
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                reply_markup=main_reply_markup
            )
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        for vac in vacancies[:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞–∫–∞–Ω—Å–∏–π
            btn_text = f"{vac['name']} ({vac['area']['name']})"
            markup.add(types.InlineKeyboardButton(
                text=btn_text,
                callback_data=f"vacancy_{vac['id']}"
            ))
        
        bot.send_message(
            message.chat.id,
            "üìå <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:</b>",
            reply_markup=markup,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('vacancy_'))
def handle_vacancy_view(call):
    vacancy_id = call.data.split('_')[1]
    try:
        response = requests.get(f"{HH_API_URL}/{vacancy_id}")
        vacancy = response.json()
        
        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        if 'id' not in vacancy:
            bot.answer_callback_query(call.id, "–í–∞–∫–∞–Ω—Å–∏—è –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        text = VacancyManager.format_vacancy(vacancy)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="üì® –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è",
            callback_data=f"apply_{vacancy_id}"
        ))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=markup,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except requests.exceptions.RequestException as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {str(e)}")
    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
@bot.callback_query_handler(func=lambda call: call.data.startswith('apply_'))
def handle_vacancy_apply(call):
    vacancy_id = call.data.split('_')[1]
    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    cursor.execute("SELECT registered_name FROM users WHERE telegram_id = ?", (user_id,))
    user_data = cursor.fetchone()
    user_name = user_data[0] if user_data else call.from_user.first_name
    
    msg = bot.send_message(
        call.message.chat.id,
        f"‚úçÔ∏è <b>–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        f"1. –ë—ã–ª –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏?\n"
        f"2. –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å?\n"
        f"3. –ö–∞–∫–∏–µ –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ?\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        parse_mode="HTML"
    )
    
    bot.register_next_step_handler(msg, process_application, vacancy_id, user_name)

def process_application(message, vacancy_id, user_name):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
        response = requests.get(f"{HH_API_URL}/{vacancy_id}")
        vacancy = response.json()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –¥–ª—è HR
        application_text = f"""
üì® <b>–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</b>
üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {user_name} (@{message.from_user.username if message.from_user.username else '–Ω–µ—Ç'})
üìù <b>–í–∞–∫–∞–Ω—Å–∏—è:</b> {vacancy['name']}
üîó <b>–°—Å—ã–ª–∫–∞:</b> {vacancy['alternate_url']}

<b>–û—Ç–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:</b>
{message.text}

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
Telegram: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
ID: {message.from_user.id}
"""
        #–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HR 
        hr_chat_ids = [5026101856]  
        for chat_id in hr_chat_ids:
            try:
                bot.send_message(chat_id, application_text, parse_mode="HTML")
            except:
                pass
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! HR —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=main_reply_markup
        )
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            INSERT INTO applications (user_id, vacancy_id, answers, applied_at)
            VALUES (?, ?, ?, datetime('now'))
        """, (message.from_user.id, vacancy_id, message.text))
        conn.commit()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–∏–∫–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_reply_markup
        )
        
@bot.message_handler(func=lambda message: message.text == "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üöÄ")
def handle_career_helper(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists("src/career_helper.png"):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            raise FileNotFoundError("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        with open("src/career_helper.png", "rb") as photo:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫—Ä–∞—Ç–∫–æ–π –ø–æ–¥–ø–∏—Å—å—é
            bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption="<b>ü§ñ –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Rodanika</b>",
                parse_mode="HTML"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(
                types.KeyboardButton("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ"),
                types.KeyboardButton("–°–æ–≤–µ—Ç—ã –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"),
                types.KeyboardButton("–ù–∞–∑–∞–¥")
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_message(
                chat_id=message.chat.id,
                text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:</b>",
                reply_markup=markup,
                parse_mode="HTML"
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ"),
            types.KeyboardButton("–°–æ–≤–µ—Ç—ã –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"),
            types.KeyboardButton("–ù–∞–∑–∞–¥")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(
            chat_id=message.chat.id,
            text="<b>ü§ñ –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Rodanika</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=markup,
            parse_mode="HTML"
        )
    
#–∫–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ
@bot.message_handler(func=lambda message: message.text == "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ")
def handle_resume_analysis(message):
    msg = bot.send_message(
        message.chat.id,
        "üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ, –∏ —è –¥–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É:",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_resume_analysis)

def process_resume_analysis(message):
    user_text = message.text
    bot.send_chat_action(message.chat.id, 'typing')  # "–ø–µ—á–∞—Ç–∞–µ—Ç"
    
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –æ—Ü–µ–Ω–∫—É:
    {user_text}
    
    –û—Ü–µ–Ω–∏:
    1. –°—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    2. –ü–æ–ª–Ω–æ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    3. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    """
    
    analysis = ask_yandex_gpt(prompt)
    
    if analysis:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_response = f"""
<b>üìä –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ:</b>

<b>{analysis}</b>

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ–ø–∏—Å–∞–Ω –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>
"""
        bot.send_message(
            message.chat.id,
            formatted_response,
            parse_mode="HTML",
            reply_markup=main_reply_markup
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_reply_markup
        )

@bot.message_handler(func=lambda message: message.text == "–°–æ–≤–µ—Ç—ã –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é")
def handle_interview_tips(message):
    prompt = """–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∫–≤–∞—Å–∞, –º–æ—Ä—Å–∞ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤"""
    
    bot.send_chat_action(message.chat.id, 'typing')
    tips = ask_yandex_gpt(prompt)
    
    if tips:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"""
<b>üìù –ß–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –≤ Rodanika:</b>

<b>{tips}</b>

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ–ø—ã—Ç–∞
‚Ä¢ –ò–∑—É—á–∏—Ç–µ –Ω–∞—à—É –ø—Ä–æ–¥—É–∫—Ü–∏—é
‚Ä¢ –ü—Ä–æ–¥—É–º–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏</b>
"""
    else:
        response = """
<b>üìù –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:
1. –ò–∑—É—á–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é: –º–∏—Å—Å–∏—è, –ø—Ä–æ–µ–∫—Ç—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
2. –ü—Ä–æ–¥—É–º–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–ø–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
3. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –æ–Ω–ª–∞–π–Ω-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</b>
"""
    
    bot.send_message(
        message.chat.id,
        response,
        parse_mode="HTML",
        reply_markup=create_back_button_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é")
def handle_interview_preparation(message):
    prompt = """–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∫–≤–∞—Å–∞, –º–æ—Ä—Å–∞ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤, –≤–∫–ª—é—á–∞—è:
1. –ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –æ –∫–æ–º–ø–∞–Ω–∏–∏
2. –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
3. –ß—Ç–æ –Ω–∞–¥–µ—Ç—å
4. –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å
5. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"""
    
    bot.send_chat_action(message.chat.id, 'typing')
    tips = ask_yandex_gpt(prompt)
    
    if tips:
        response = f"üìù <b>–ß–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é:</b>\n\n{tips}"
    else:
        response = """üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>
1. –ò–∑—É—á–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é: –º–∏—Å—Å–∏—è, –ø—Ä–æ–µ–∫—Ç—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
2. –ü—Ä–æ–¥—É–º–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–ø–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
3. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –æ–Ω–ª–∞–π–Ω-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
    bot.send_message(
        message.chat.id,
        response,
        parse_mode="HTML",
        reply_markup=create_back_button_keyboard()
    )

#–ö–Ω–æ–ø–∫–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏
@bot.message_handler(func=lambda message: message.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏")
def handle_common_questions(message):
    prompt = """–ü–µ—Ä–µ—á–∏—Å–ª–∏ 10 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∫–≤–∞—Å–∞ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. 
–í–∫–ª—é—á–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."""
    
    bot.send_chat_action(message.chat.id, 'typing')
    questions = ask_yandex_gpt(prompt)
    
    if questions:
        response = f"‚ùì <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:</b>\n\n{questions}"
    else:
        response = """‚ùì <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
1. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ)
2. –ü–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —É –Ω–∞—Å? (–ø–æ–∫–∞–∂–∏—Ç–µ –∑–Ω–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏)
3. –í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ/—Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (–±—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã, –Ω–æ —Ç–∞–∫—Ç–∏—á–Ω—ã)
4. –ì–¥–µ –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç?"""
    
    bot.send_message(
        message.chat.id,
        response,
        parse_mode="HTML",
        reply_markup=create_back_button_keyboard()
    )
# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
user_states = {}

def set_user_state(user_id, state):
    user_states[user_id] = state

def get_user_state(user_id):
    return user_states.get(user_id)


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
@bot.message_handler(func=lambda message: message.text == "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É")
def handle_soft_skills(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–£–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–î—Ä—É–≥–æ–µ")
    
    msg = bot.send_message(
        message.chat.id,
        "ü§ù <b>–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç—å?</b>",
        parse_mode="HTML",
        reply_markup=markup
    )
    set_user_state(message.from_user.id, "awaiting_trebovania_skill")
    bot.register_next_step_handler(msg, process_trebovania_skills)

def process_trebovania_skills(message):
    if message.text == "–ù–∞–∑–∞–¥":
        #handle_skills_development(message)
        return
    
    skill = message.text
    msg = bot.send_message(
        message.chat.id,
        f"‚è≥ –°–æ—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–∑–≤–∏—Ç–∏—è {skill}...",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    prompt = f"""–ü—Ä–∏–¥—É–º–∞–π –Ω–µ–±–æ–ª—å—à–æ–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–∞ {skill} –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å–≤–µ –∫–≤–∞—Å–∞. –í–∫–ª—é—á–∏:
1. –†–∞–∑–≤–∏–≤–∞—Ç—å –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—é  
2. –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –≤ —Ä–∞–±–æ—Ç–µ"""
    
    response = ask_yandex_gpt(prompt)
    
    if not response:
        response = f"""üìà <b>–ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è {skill}:</b>
1. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
2. –£—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö
3. –†–µ—Ñ–ª–µ–∫—Å–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    bot.send_message(
        message.chat.id,
        response,
        parse_mode="HTML",
        reply_markup=create_back_button_keyboard()
    )
    set_user_state(message.from_user.id, None)


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def handle_back(message):
    current_state = get_user_state(message.from_user.id)
    
    if current_state and current_state.startswith("awaiting"):
        set_user_state(message.from_user.id, None)
    
    #handle_skills_development(message)

FEEDBACK_LIMIT = 5
@bot.message_handler(func=lambda message: message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üìã")
def start_feedback(message):
    user_id = message.from_user.id
    try:
        cursor.execute("SELECT COUNT(*) FROM feedback WHERE user_id = ?", (user_id,))
        feedback_count = cursor.fetchone()[0]

        if feedback_count >= FEEDBACK_LIMIT:
            bot.send_message(
                message.chat.id,
                f"–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ ({FEEDBACK_LIMIT}). –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
                reply_markup=main_reply_markup
            )
            return

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add("1 ‚≠êÔ∏è", "2 ‚≠êÔ∏è‚≠êÔ∏è", "3 ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", "4 ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", "5 ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è")

        msg = bot.send_message(
            message.chat.id,
            "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º (1-5 –∑–≤–µ–∑–¥):</b>",
            reply_markup=markup,
            parse_mode="HTML"
        )
        bot.register_next_step_handler(msg, process_feedback_rating) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

    except sqlite3.Error as e:
        print(f"Database error checking feedback count: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_reply_markup
        )
    except Exception as e:
        print(f"Unexpected error in start_feedback: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_reply_markup
        )


def process_feedback_rating(message):
    try:
        rating = int(message.text[0])
        if not 1 <= rating <= 5:
            raise ValueError

        user_data = {'rating': rating}
        markup = types.ForceReply(selective=False)
        msg = bot.send_message(message.chat.id,
                               "<b>–°–ø–∞—Å–∏–±–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:</b>",
                               reply_markup=markup, parse_mode="HTML")
        bot.register_next_step_handler(msg, process_feedback_comments, user_data)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥")
        start_feedback(message) #–í—ã–∑—ã–≤–∞–µ–º start_feedback –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_feedback_rating: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
def process_feedback_rating(message):
    try:
        rating = int(message.text[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ "1 ‚≠êÔ∏è"
        if not 1 <= rating <= 5:
            raise ValueError
            
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {'rating': rating}
        
        markup = types.ForceReply(selective=False)
        msg = bot.send_message(message.chat.id, 
                             "<b>–°–ø–∞—Å–∏–±–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:</b>",
                             reply_markup=markup, parse_mode="HTML")
        bot.register_next_step_handler(msg, process_feedback_comments, user_data)
    except:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥")
        start_feedback(message)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
def get_back_button():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adapt_back"))
    return markup

def process_feedback_comments(message, user_data):
    try:
        comments = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
        INSERT INTO feedback (user_id, rating, comments)
        VALUES (?, ?, ?)
        """, (message.from_user.id, user_data['rating'], comments))
        conn.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = generate_feedback_report(user_data['rating'], comments)
        
        bot.send_message(message.chat.id, 
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {user_data['rating']}‚≠ê\n"
                        f"–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments}\n\n"
                        f"–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç:\n{report}",
                        reply_markup=main_reply_markup)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        send_feedback_to_admin(message.from_user, user_data['rating'], comments)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–¥–±–µ–∫–∞: {e}")
        bot.send_message(message.chat.id, 
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=main_reply_markup)

def generate_feedback_report(rating, comments):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç –±–µ–∑ GPT"""
    sentiment = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π" if rating >=4 else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π" if rating ==3 else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"
    keywords = {
        1: "–∫—Ä–∏—Ç–∏–∫–∞, –ø—Ä–æ–±–ª–µ–º—ã",
        2: "–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ, —É–ª—É—á—à–µ–Ω–∏—è",
        3: "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        4: "–¥–æ–≤–æ–ª–µ–Ω, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ",
        5: "–æ—Ç–ª–∏—á–Ω–æ, –≤–æ—Å—Ç–æ—Ä–≥"
    }.get(rating, "")
    
    return f"""üìä –û—Ç—á–µ—Ç –ø–æ –æ—Ç–∑—ã–≤—É:
- –û—Ü–µ–Ω–∫–∞: {rating}/5
- –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {sentiment}
- –ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã: {keywords}
- –î–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {len(comments.split())} —Å–ª–æ–≤
"""

def send_feedback_to_admin(user, rating, comments):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º"""
    admin_chat_ids = [5026101856]  
    
    feedback_text = f"""
üì© –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
üë§ {user.first_name} (@{user.username})
‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
{comments}
"""
    
    for chat_id in admin_chat_ids:
        try:
            bot.send_message(chat_id, feedback_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–¥–±–µ–∫–∞ –∞–¥–º–∏–Ω—É {chat_id}: {e}")


@bot.message_handler(func=lambda message: message.text == "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? ü¶æ")
def handle_what_can_bot_do(message):
    with open("src/—á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç.png", "rb") as photo:  
        bot.send_photo(message.chat.id, photo)
    text = """
<b>üëã –Ø ‚Äî HR-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Rodanika! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

‚ùì –û—Ç–≤–µ—á–∞—é –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã  
üöÄ –ü–æ–º–æ–≥–∞—é —Å –ø–æ–∏—Å–∫–æ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π  
üõ† –ü–æ–º–æ–≥–∞—é –Ω–æ–≤–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–ø–µ ‚Äî –¥–∞—é –Ω—É–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø–ª–∞–Ω –Ω–µ –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é
ü§ù –ü–æ–º–æ–≥–∞—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞  
üéØ –î–∞—é —Å–æ–≤–µ—Ç—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è  
üìã –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é, –∫–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç

üîç –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å GPT –ø–æ–º–æ–≥–∞–µ—Ç:  
1Ô∏è‚É£ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ  
2Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é
3Ô∏è‚É£ –î–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏


üí° –ë–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –≤ —á–∞—Ç, –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –≤ –±–æ—Ç–µ –º–æ–∂–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –∏ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ –≤ HR –æ—Ç–¥–µ–ª.


üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏, –∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫.


üåê –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ!:</b>
    """
    bot.send_message(message.chat.id, text, reply_markup=inline_markup_website, parse_mode="HTML")



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
def get_back_button():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adapt_back"))
    return markup

@bot.message_handler(func=lambda message: message.text == "–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üõ†")
def handle_adaptation(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
        file_path = "src/–∞–¥–∞–ø—Ç–∞—Ü–∏—è .png"
        
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
        with open(file_path, "rb") as photo:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            
            caption = """<b>üîπ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üîπ</b>
            
–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"""
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            bot.send_photo(
                chat_id=message.chat.id,
                photo=photo,
                caption=caption,
                parse_mode="HTML",
                reply_markup=adaptation_markup,
                timeout=30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            )
    
    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}"
        print(error_msg)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
        bot.send_message(
            chat_id=message.chat.id,
            text=f"<b>üîπ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ üîπ</b>\n\n{error_msg}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            parse_mode="HTML",
            reply_markup=adaptation_markup
        )
# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
adaptation_markup = types.InlineKeyboardMarkup()
adaptation_markup.row(
    types.InlineKeyboardButton("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="adapt_welcome"),
    types.InlineKeyboardButton("1-—è –Ω–µ–¥–µ–ª—è", callback_data="adapt_first_week")
)
adaptation_markup.row(
    types.InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="adapt_contacts"),
    types.InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", callback_data="adapt_links")
)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
def get_back_button():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adapt_back"))
    return markup

#–∫–Ω–æ–ø–∫–∞ "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
@bot.callback_query_handler(func=lambda call: call.data.startswith('adapt_'))
def handle_adaptation_callback(call):
    try:
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        try:
            bot.delete_message(chat_id, message_id)
        except Exception as delete_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")

        if call.data == "adapt_welcome":
            text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É Rodanika!</b>

<b>–ú—ã –±–µ–∑—É–º–Ω–æ —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π —Å–µ–º—å–µ! –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –∫–∞–∫ –≥–µ—Ä–æ–π —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–æ—Ä–≤–∞–ª—Å—è –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä Rodanika! üòâ

–ß—Ç–æ–±—ã —Ç–≤–æ–π –¥–µ–±—é—Ç –±—ã–ª —è—Ä–∫–∏–º –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞:

‚¶Å –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! –ó–∞–¥–∞–≤–∞–π –≤—Å—ë, —á—Ç–æ –≤–∑–±—Ä–µ–¥—ë—Ç —Ç–µ–±–µ –≤ –≥–æ–ª–æ–≤—É ‚Äì –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –Ω–∞ –≤—Å—ë –æ—Ç–≤–µ—Ç–∏–º! –î–∞–∂–µ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ —Å—É–ø–µ—Ä-–ø—Ä–æ—Å—Ç—ã–º ‚Äì –Ω–µ –±–æ–π—Å—è, –ª—É—á—à–µ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–æ —Ä–∞–∑, —á–µ–º –æ–¥–∏–Ω —Ä–∞–∑ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! üòÖ
‚¶Å –ó–Ω–∞–∫–æ–º—å—Å—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏! –ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ‚Äì —ç—Ç–æ –∫–ª–∞—Å—Å–Ω—ã–µ —Ä–µ–±—è—Ç–∞! –ù–∞–π–¥–∏ —Å–µ–±–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, –æ–±—Å—É–∂–¥–∞–π –ª—é–±–∏–º—ã–µ —Å–µ—Ä–∏–∞–ª—ã, –¥–µ–ª–∏—Å—å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –≤–∫—É—Å–Ω—ã—Ö –æ–±–µ–¥–æ–≤ (–∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ —Å–≤–æ–∏—Ö –ø–æ—Ö–æ–∂–¥–µ–Ω–∏—è—Ö –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö!) ‚Äì —Å–æ–∑–¥–∞–≤–∞–π —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏! ü§ó
‚¶Å –ò–∑—É—á–∏ –Ω–∞—à–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏! –≠—Ç–æ –Ω–µ —Å–∫—É—á–Ω–∞—è –ª–µ–∫—Ü–∏—è, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ–º–ø–∞—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –º–∏—Ä–µ Rodanika –∏ –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! ‚ú®
‚¶Å –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á–∏ —Å HR –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º! –≠—Ç–æ –∫–∞–∫ –≤—Å—Ç—Ä–µ—á–∞ —Å –≥–∏–¥–∞–º–∏ –ø–æ —Ç–≤–æ–µ–º—É –Ω–æ–≤–æ–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é ‚Äì –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å—Å—è –∏ –ø–æ–∫–∞–∂—É—Ç –≤—Å–µ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! üó∫Ô∏è

–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ —É—Å–ø–µ—Ö–æ–≤, –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞ –∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ Rodanika! Let's go! üöÄ</b>"""

            bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                reply_markup=get_back_button()
            )

        elif call.data == "adapt_first_week":
            text = """<b>üóì –ù–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∫–≤–∞—Å–∞</b>

<u>–î–µ–Ω—å 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º</u>
üïò 9:00-10:30 ‚Äî –í–≤–æ–¥–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≥–∏–≥–∏–µ–Ω–µ –∏ —Å–ø–µ—Ü–æ–¥–µ–∂–¥–µ
üï• 10:30-12:00 ‚Äî –≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ —Ü–µ—Ö–∞–º:
üî∏ –°—ã—Ä—å–µ–≤–æ–π —Å–∫–ª–∞–¥ (–º—É–∫–∞, —Å–æ–ª–æ–¥, –¥—Ä–æ–∂–∂–∏)
üî∏ –ë—Ä–æ–¥–∏–ª—å–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ 
üî∏ –õ–∏–Ω–∏—è —Ä–æ–∑–ª–∏–≤–∞
üî∏ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
üïê 13:00-14:30 ‚Äî –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∫–æ–º–∞–Ω–¥–æ–π:
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –≤ —Å–º–µ–Ω–µ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞

<u>–î–µ–Ω—å 2: –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã</u>
üïò 9:00-11:00 ‚Äî –¢–µ–æ—Ä–∏—è:
üìö –≠—Ç–∞–ø—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å—É—Å–ª–∞
üìö –ü—Ä–∏–Ω—Ü–∏–ø—ã –±—Ä–æ–∂–µ–Ω–∏—è
üìö –ù–æ—Ä–º—ã –ì–û–°–¢ –¥–ª—è –∫–≤–∞—Å–∞
üïö 11:30-13:00 ‚Äî –ü—Ä–∞–∫—Ç–∏–∫—É–º:
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥—Ä–æ–∂–∂–µ–≤–æ–π –∑–∞–∫–≤–∞—Å–∫–∏
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –±—Ä–æ–∂–µ–Ω–∏—è
üïë 14:00-15:30 ‚Äî –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π:
‚Ä¢ –ñ—É—Ä–Ω–∞–ª—ã —É—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ HACCP

<u>–î–µ–Ω—å 3: –†–∞–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º</u>
üïó 8:30-12:00 ‚Äî –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á:
üîπ –ü—Ä–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—ã—Ä—å—è
üîπ –ó–∞–ø—É—Å–∫ –±—Ä–æ–¥–∏–ª—å–Ω—ã—Ö —Ç–∞–Ω–∫–æ–≤
üîπ –û—Ç–±–æ—Ä –ø—Ä–æ–± –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üïß 12:30-14:00 ‚Äî –†–∞–∑–±–æ—Ä —Ç–∏–ø–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π:
‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–Ω–∏–∏

<u>–î–µ–Ω—å 4: –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</u>
üïò 9:00-11:00 ‚Äî –†–∞–±–æ—Ç–∞ –Ω–∞ —É—á–∞—Å—Ç–∫–∞—Ö:
‚ñ∂Ô∏è –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—É—Å–ª–∞
‚ñ∂Ô∏è –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏
‚ñ∂Ô∏è –ú–æ–π–∫–∞ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
üïß 12:30-14:30 ‚Äî –û—Å–≤–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–∏–Ω–∏–µ–π —Ä–æ–∑–ª–∏–≤–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏

<u>–î–µ–Ω—å 5: –ò—Ç–æ–≥–æ–≤–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è</u>
üïô 10:00-12:00 ‚Äî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
üìù –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã
üìù –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
üïê 13:00-15:00 ‚Äî –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞–≤—ã–∫–æ–≤
‚Ä¢ –í—Ä—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""

            bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                reply_markup=get_back_button()
            )

        elif call.data == "adapt_contacts":
            text = """üìû <b>–í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>

<b>HR-–º–µ–Ω–µ–¥–∂–µ—Ä:</b> @hr_rodanika
<b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @it_support_rodanika
<b>–í–∞—à –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫:</b> (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞)
<b>–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è:</b> finance@rodanika.ru"""

            bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                reply_markup=get_back_button()
            )

        elif call.data == "adapt_links":
            text = """üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏</b>

1. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç–∞–ª: https://portal.rodanika.ru
2. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞: https://mail.rodanika.ru
3. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: https://wiki.rodanika.ru
4. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: https://events.rodanika.ru"""

            bot.send_message(
                chat_id,
                text,
                parse_mode="HTML",
                reply_markup=get_back_button()
            )

        elif call.data == "adapt_back":
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å —Ñ–æ—Ç–æ
            try:
                with open("src/–∞–¥–∞–ø—Ç–∞—Ü–∏—è .png", "rb") as photo:
                    bot.send_photo(
                        chat_id,
                        photo,
                        caption="<b>üîπ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üîπ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
                        parse_mode="HTML",
                        reply_markup=adaptation_markup
                    )
            except FileNotFoundError:
                bot.send_message(
                    chat_id,
                    "<b>üîπ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üîπ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
                    parse_mode="HTML",
                    reply_markup=adaptation_markup
                )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_adaptation_callback: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

#–∫–Ω–æ–ø–∫–∞ –Ω–∞–¥–∞–¥ –≤ –º–µ–Ω—é
adaptation_markup.row(
    types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main_menu")
def handle_back_to_main_menu(call):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        bot.send_message(
            call.message.chat.id,
            "<b>–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:</b>",
            parse_mode="HTML",
            reply_markup=main_reply_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
#–ß–ê–°—Ç–´–ï –í–û–ü–†–û–°–´
@bot.message_handler(func=lambda message: message.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì")
def handle_faq_list_button(message):
    with open("src/—á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã .png", "rb") as photo:  
        bot.send_photo(message.chat.id, photo)
    if not cursor or not conn:
        bot.send_message(message.chat.id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    faq_inline_markup = types.InlineKeyboardMarkup(row_width=1)
    try:
        cursor.execute("SELECT id, question FROM faq ORDER BY id LIMIT 10") 
        questions = cursor.fetchall()

        if not questions:
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!", reply_markup=create_back_button_keyboard())
            return
        for q_id, q_text in questions:
            button = types.InlineKeyboardButton(text=q_text, callback_data=f"faq_{q_id}")
            faq_inline_markup.add(button)

        # –î–æ–±–∞–≤–ª—è–µ–º Inline-–∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        back_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        faq_inline_markup.add(back_button)

        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
            reply_markup=faq_inline_markup
        )

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ FAQ: {e}")
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_back_button_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Inline-–∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def handle_back_button(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=None
    )

@bot.message_handler(commands=['help'])
def handle_help_usage(message):
    with open("src/–ø–æ–º–æ—â—å.png", "rb") as photo:  
        bot.send_photo(message.chat.id, photo)
    text = """
    <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞, –∞ —Ç–∞–∫–∂–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞:</b>
     <b>‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã? –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.</b>
     <b>üöÄ –í–∞–∫–∞–Ω—Å–∏–∏: –ò—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É? –£–∑–Ω–∞–π—Ç–µ –æ —Ç–µ–∫—É—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.</b>
     <b>üõ†  –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ–π –ø—É—Ç—å –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.</b>
     <b>üìö –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫: –ø–æ–º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ –∏ –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏.</b>
     <b>ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–º–æ—â—å: –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å!</b>
     <b>üì± –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.</b>
<b>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞: @devlifee</b>
"""

    bot.send_message(message.chat.id, text, parse_mode="HTML")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
@bot.message_handler(commands=['subscribe_news'])
def subscribe_news_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ (/subscribe_news)"""
    try:
        cursor.execute("""
            INSERT OR IGNORE INTO news_subscribers (user_id)
            VALUES (?)
        """, (message.from_user.id,))
        conn.commit()
        
        if cursor.rowcount > 0:
            bot.reply_to(message, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ HR!")
        else:
            bot.reply_to(message, "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['unsubscribe_news'])
def unsubscribe_news_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π (/unsubscribe_news)"""
    try:
        cursor.execute("""
            DELETE FROM news_subscribers
            WHERE user_id = ?
        """, (message.from_user.id,))
        conn.commit()
        
        if cursor.rowcount > 0:
            bot.reply_to(message, "‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π HR.")
        else:
            bot.reply_to(message, "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['add_news'])
def add_news_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ (/add_news)"""
    try:
        if message.from_user.id not in [5026101856]:
            bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
            return
            
        msg = bot.send_message(
            message.chat.id,
            "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, process_news_title_command)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_news_title_command(message):
    if len(message.text) > 100:
        bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return add_news_command(message)
        
    msg = bot.send_message(
        message.chat.id,
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–µ –±–æ–ª–µ–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_news_content_command, message.text)

def process_news_content_command(message, title):
    if len(message.text) > 2000:
        bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return add_news_command(message)
        
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –ë–î
        cursor.execute("""
            INSERT INTO news (hr_id, title, content)
            VALUES (?, ?, ?)
        """, (message.from_user.id, title, message.text))
        conn.commit()
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        send_news_to_subscribers(message.from_user.id, title, message.text)
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!",
            reply_markup=create_back_button_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_button_keyboard()
        )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
@bot.message_handler(func=lambda message: message.text == "–ù–æ–≤–æ—Å—Ç–∏ HR üì¢")
def handle_hr_news(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ HR –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
    is_hr = False
    try:
        cursor.execute("SELECT 1 FROM hr_rights WHERE user_id = ?", (message.from_user.id,))
        is_hr = cursor.fetchone() is not None
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ HR: {e}")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [
        types.KeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
        types.KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏"),
        types.KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
    ]
    
    #if is_hr:
    #    buttons.append(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"))
    
    buttons.append(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    markup.add(*buttons)
    
    bot.send_message(
        message.chat.id,
        "<b>üì¢ –ù–æ–≤–æ—Å—Ç–∏ HR-—Å–ª—É–∂–±—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
        parse_mode="HTML"
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
def show_latest_news(message):
    try:
        cursor.execute("""
            SELECT n.title, n.content, n.created_at, u.registered_name 
            FROM news n
            JOIN users u ON n.hr_id = u.telegram_id
            ORDER BY n.created_at DESC
            LIMIT 5
        """)
        news = cursor.fetchall()
        
        if not news:
            bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.", reply_markup=create_back_button_keyboard())
            return
            
        response = "<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
        for idx, (title, content, date, author) in enumerate(news, 1):
            response += f"<b>{idx}. {title}</b>\n"
            response += f"<i>{content}</i>\n"
            response += f"üìÖ {date[:10]} | üë§ {author}\n\n"
            
        bot.send_message(
            message.chat.id,
            response,
            parse_mode="HTML",
            reply_markup=create_back_button_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_button_keyboard()
        )

# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏")
def subscribe_to_news(message):
    try:
        cursor.execute("""
            INSERT OR IGNORE INTO news_subscribers (user_id)
            VALUES (?)
        """, (message.from_user.id,))
        conn.commit()
        
        if cursor.rowcount > 0:
            bot.send_message(
                message.chat.id,
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ HR!",
                reply_markup=create_back_button_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏.",
                reply_markup=create_back_button_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_button_keyboard()
        )

# –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
def unsubscribe_from_news(message):
    try:
        cursor.execute("""
            DELETE FROM news_subscribers
            WHERE user_id = ?
        """, (message.from_user.id,))
        conn.commit()
        
        if cursor.rowcount > 0:
            bot.send_message(
                message.chat.id,
                "‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π HR.",
                reply_markup=create_back_button_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏.",
                reply_markup=create_back_button_keyboard()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_button_keyboard()
        )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–¥–ª—è HR)
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
def add_news_start(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ HR
        cursor.execute("SELECT 1 FROM hr_rights WHERE user_id = ?", (message.from_user.id,))
        if not cursor.fetchone():
            bot.send_message(message.chat.id, "‚õî –¢–æ–ª—å–∫–æ HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
            return
            
        msg = bot.send_message(
            message.chat.id,
            "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, process_news_title)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_button_keyboard()
        )

def process_news_title(message):
    if len(message.text) > 100:
        bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return add_news_start(message)
        
    msg = bot.send_message(
        message.chat.id,
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–µ –±–æ–ª–µ–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_news_content, message.text)

def process_news_content(message, title):
    if len(message.text) > 2000:
        bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return add_news_start(message)
        
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –ë–î
        cursor.execute("""
            INSERT INTO news (hr_id, title, content)
            VALUES (?, ?, ?)
        """, (message.from_user.id, title, message.text))
        conn.commit()
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        send_news_to_subscribers(message.from_user.id, title, message.text)
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!",
            reply_markup=create_back_button_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_back_button_keyboard()
        )

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
def send_news_to_subscribers(hr_id, title, content):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
        cursor.execute("SELECT registered_name FROM users WHERE telegram_id = ?", (hr_id,))
        author = cursor.fetchone()[0] or "HR"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
        news_text = f"""
<b>üì¢ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç {author}:</b>

<b>{title}</b>

{content}

<i>–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–æ–≤–æ—Å—Ç–∏ HR"</i>
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        cursor.execute("SELECT user_id FROM news_subscribers")
        subscribers = [row[0] for row in cursor.fetchall()]
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É (–ª–∏–º–∏—Ç Telegram)
        for i, user_id in enumerate(subscribers):
            try:
                if i % 20 == 0 and i > 0:
                    time.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                
                bot.send_message(user_id, news_text, parse_mode="HTML")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
                cursor.execute("DELETE FROM news_subscribers WHERE user_id = ?", (user_id,))
                conn.commit()
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")


# –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast
@bot.message_handler(commands=['broadcast'])
def handle_broadcast(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ HR
        user_id = message.from_user.id
        cursor.execute("SELECT 1 FROM hr_rights WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        msg = bot.send_message(message.chat.id, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=types.ForceReply())
        bot.register_next_step_handler(msg, process_broadcast_message)

    except Exception as e:
        logging.error(f"Broadcast error: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏")

def process_broadcast_message(message):
    try:
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_reply_markup)
            return

        # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
        
        bot.send_message(message.chat.id, 
                       f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
                       reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: confirm_broadcast(m, message.text))

    except Exception as e:
        logging.error(f"Broadcast processing error: {str(e)}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

def confirm_broadcast(message, broadcast_text):
    try:
        if message.text != '‚úÖ –î–∞':
            bot.send_message(message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_reply_markup)
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT telegram_id FROM users")
        users = cursor.fetchall()
        
        sent = 0
        errors = 0
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞—É–∑–∞–º–∏
        for i, user in enumerate(users):
            try:
                if i % 20 == 0 and i != 0:  # –ü–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                    time.sleep(1)
                
                bot.send_message(user[0], f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç HR:\n\n{broadcast_text}")
                sent += 1
            except Exception as e:
                errors += 1
                logging.error(f"Error sending to {user[0]}: {str(e)}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        cursor.execute("""
            INSERT INTO broadcasts (hr_id, message)
            VALUES (?, ?)
        """, (message.from_user.id, broadcast_text))
        conn.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
‚îå –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}
‚îú –£—Å–ø–µ—à–Ω–æ: {sent}
‚îî –û—à–∏–±–æ–∫: {errors}"""
        
        bot.send_message(message.chat.id, report, reply_markup=main_reply_markup)

    except Exception as e:
        logging.error(f"Broadcast error: {str(e)}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
@bot.message_handler(commands=['grant_hr'])
def handle_grant_hr(message):
    try:
        # –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
        if message.from_user.id not in [5026101856]:  
            return
            
        if not message.reply_to_message:
            bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        target_id = message.reply_to_message.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∞–≤
        cursor.execute("""
            INSERT OR IGNORE INTO hr_rights (user_id, granted_by)
            VALUES (?, ?)
        """, (target_id, message.from_user.id))
        conn.commit()
        
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} —Å—Ç–∞–ª HR")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∞–≤: {str(e)}")

@bot.message_handler(commands=['clear_faq'])
def handle_clear_faq(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if message.from_user.id not in [5026101856]:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        cursor.execute("DELETE FROM faq")
        conn.commit()
        bot.reply_to(message, "‚úÖ –¢–∞–±–ª–∏—Ü–∞ faq —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏/–¥–æ–∫—É–º–µ–Ω—Ç–∞ üìÑ")
def handle_document_request(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("–°–ø—Ä–∞–≤–∫–∞ –æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"),
        types.KeyboardButton("–°–ø—Ä–∞–≤–∫–∞ 2-–ù–î–§–õ"),
        types.KeyboardButton("–ö–æ–ø–∏—è —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞"),
        types.KeyboardButton("–î—Ä—É–≥–∞—è —Å–ø—Ä–∞–≤–∫–∞"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    
    bot.send_message(
        message.chat.id,
        "üìÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω—É–∂–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@bot.message_handler(func=lambda message: message.text in [
    "–°–ø—Ä–∞–≤–∫–∞ –æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ", 
    "–°–ø—Ä–∞–≤–∫–∞ 2-–ù–î–§–õ", 
    "–ö–æ–ø–∏—è —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞",
    "–î—Ä—É–≥–∞—è —Å–ø—Ä–∞–≤–∫–∞"
])
def handle_document_type(message):
    document_type = message.text
    if document_type == "–î—Ä—É–≥–∞—è —Å–ø—Ä–∞–≤–∫–∞":
        msg = bot.send_message(
            message.chat.id,
            "‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ —Å–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤–∞–º –Ω—É–∂–Ω—ã:",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, process_custom_document_type)
    else:
        msg = bot.send_message(
            message.chat.id,
            f"‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {document_type.lower()} (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –∏ —Ç.–¥.):",
            reply_markup=types.ForceReply()
        )
        bot.register_next_step_handler(msg, process_document_request, document_type)

def process_custom_document_type(message):
    document_type = message.text
    msg = bot.send_message(
        message.chat.id,
        f"‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{document_type}':",
        reply_markup=types.ForceReply()
    )
    bot.register_next_step_handler(msg, process_document_request, document_type)

def process_document_request(message, document_type):
    additional_info = message.text
    user_id = message.from_user.id
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            INSERT INTO document_requests (user_id, document_type, additional_info, estimated_completion)
            VALUES (?, ?, ?, ?)
        """, (user_id, document_type, additional_info, "1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è"))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è HR
        cursor.execute("SELECT registered_name FROM users WHERE telegram_id = ?", (user_id,))
        user_data = cursor.fetchone()
        user_name = user_data[0] if user_data else message.from_user.first_name
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è HR
        notification_text = f"""
üìÑ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>
üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {user_name} (@{message.from_user.username if message.from_user.username else '–Ω–µ—Ç'})
üìù <b>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b> {document_type}
‚ÑπÔ∏è <b>–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {additional_info}
üÜî <b>User ID:</b> {user_id}
"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR (email/Telegram/—Ç–∞–±–ª–∏—Ü–∞)
        send_document_request_notification(notification_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            f"‚úÖ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ {document_type.lower()} –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
            f"–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è\n"
            f"HR —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏, –∫–æ–≥–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.",
            parse_mode="HTML",
            reply_markup=main_reply_markup
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_reply_markup
        )

def send_document_request_notification(notification_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram HR-–∞–º
        hr_chat_ids = [5026101856]  
        for chat_id in hr_chat_ids:
            try:
                bot.send_message(chat_id, notification_text, parse_mode="HTML")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è {chat_id}: {e}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è HR)
@bot.message_handler(commands=['document_requests'])
def handle_view_requests(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ HR
        cursor.execute("SELECT 1 FROM hr_rights WHERE user_id = ?", (message.from_user.id,))
        if not cursor.fetchone():
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return
            
        cursor.execute("""
            SELECT dr.id, u.registered_name, dr.document_type, dr.additional_info, 
                   dr.status, dr.created_at, dr.estimated_completion
            FROM document_requests dr
            JOIN users u ON dr.user_id = u.telegram_id
            ORDER BY dr.created_at DESC
            LIMIT 10
        """)
        requests = cursor.fetchall()
        
        if not requests:
            bot.reply_to(message, "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return
            
        response = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>\n\n"
        for req in requests:
            response += (
                f"üÜî <b>ID:</b> {req[0]}\n"
                f"üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {req[1]}\n"
                f"üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç:</b> {req[2]}\n"
                f"‚ÑπÔ∏è <b>–î–æ–ø. –∏–Ω—Ñ–æ:</b> {req[3]}\n"
                f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {req[4]}\n"
                f"‚è≥ <b>–°–æ–∑–¥–∞–Ω:</b> {req[5]}\n"
                f"‚è± <b>–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫:</b> {req[6]}\n\n"
            )
            
        bot.reply_to(message, response, parse_mode="HTML")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è HR)
@bot.message_handler(commands=['update_request'])
def handle_update_request(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ HR
        cursor.execute("SELECT 1 FROM hr_rights WHERE user_id = ?", (message.from_user.id,))
        if not cursor.fetchone():
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return
            
        if not message.reply_to_message or not message.reply_to_message.text:
            bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å")
            return
            
        try:
            request_id = int(message.text.split()[1])
            new_status = message.text.split()[2]
        except (IndexError, ValueError):
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_request [ID] [–Ω–æ–≤—ã–π_—Å—Ç–∞—Ç—É—Å]")
            return
            
        cursor.execute("""
            UPDATE document_requests
            SET status = ?
            WHERE id = ?
        """, (new_status, request_id))
        conn.commit()
        
        if cursor.rowcount > 0:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT user_id, document_type FROM document_requests
                WHERE id = ?
            """, (request_id,))
            req_data = cursor.fetchone()
            
            if req_data:
                user_id, doc_type = req_data
                status_text = {
                    "completed": "–≥–æ—Ç–æ–≤",
                    "rejected": "–æ—Ç–∫–ª–æ–Ω–µ–Ω",
                    "in_progress": "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"
                }.get(new_status, new_status)
                
                try:
                    bot.send_message(
                        user_id,
                        f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {doc_type.lower()} –∏–∑–º–µ–Ω–µ–Ω:</b> {status_text}",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            bot.reply_to(message, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ {request_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'")
        else:
            bot.reply_to(message, "‚ùå –ó–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")


####  –í –°–õ–£–ß–ê–ï –û–®–ò–ë–û–ö ##################################################################################################################################
@bot.callback_query_handler(func=lambda call: call.data.startswith('faq_'))
def handle_faq_answer_callback(call):
    if not cursor or not conn:
        bot.answer_callback_query(call.id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        return
    try:
        question_id_str = call.data.split('_')[1] # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏–∑ 'faq_ID'
        question_id = int(question_id_str)

        cursor.execute("SELECT question, answer FROM faq WHERE id = ?", (question_id,))
        faq_data = cursor.fetchone()

        bot.answer_callback_query(call.id) # –û—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"

        if faq_data and faq_data[1]: # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å (faq_data[0]) –∏ –æ—Ç–≤–µ—Ç (faq_data[1])
            question_text = faq_data[0]
            answer_text = faq_data[1]

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            back_button_markup = types.InlineKeyboardMarkup()
            back_button_markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_faq_list"))
# –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=f"‚ùì **{question_text}**\n\n–û—Ç–≤–µ—Ç:\n{answer_text}",
                                  reply_markup=back_button_markup,
                                  parse_mode="Markdown")
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –µ—Å–ª–∏ ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                  reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ FAQ: {e}")
        if call.id: bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_faq_answer_callback: {e}")
        if call.id: bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")




@bot.callback_query_handler(func=lambda call: call.data == 'back_to_faq_list')
def handle_back_to_faq_list_callback(call):
    if not cursor or not conn:
        bot.answer_callback_query(call.id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        return

    faq_inline_markup = types.InlineKeyboardMarkup(row_width=1)
    try:
        cursor.execute("SELECT id, question FROM faq ORDER BY id LIMIT 10")
        questions = cursor.fetchall()
        bot.answer_callback_query(call.id) # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫

        if not questions:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.",
                                  reply_markup=None)
            return

        for q_id, q_text in questions:
            button = types.InlineKeyboardButton(text=q_text, callback_data=f"faq_{q_id}")
            faq_inline_markup.add(button)

        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
                              reply_markup=faq_inline_markup)

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É FAQ: {e}")
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_back_to_faq_list_callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

@bot.message_handler(func=lambda message: True)  # –ë—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def handle_unknown_message(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    if message.text.startswith('/') or message.text in [
        "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì", 
        "–í–∞–∫–∞–Ω—Å–∏–∏ üè¢",
        "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üöÄ",
        "–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üõ†",
        "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üìã",
        "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? ü¶æ",
        "–ù–æ–≤–æ—Å—Ç–∏ HR üì¢"
    ]:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–∏
    bot.send_message(
        message.chat.id,
        "ü§ñ <b>–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_reply_markup
    )
    



#–û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HR-–±–æ—Ç–∞ Rodanika...")
    try:
        init_db() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ conn, cursor

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É FAQ –ø—Ä–∏–º–µ—Ä–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
        if cursor: # –ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –∫—É—Ä—Å–æ—Ä –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            cursor.execute("SELECT COUNT(*) FROM faq")
            if cursor.fetchone()[0] == 0:
                print("–¢–∞–±–ª–∏—Ü–∞ FAQ –ø—É—Å—Ç–∞. –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä–∞–º–∏...")
                add_faq_entry(
                    "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –Ω–∞—á–∞–ª–æ, —Å—Ç–∞—Ä—Ç",
                    "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?",
                    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–ø—Ä–æ—à—É –≤–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è, " \
                    "—á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –∏–º–µ–Ω–∏. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, –∏ –≤—Å–∫–æ—Ä–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏" \
                    "—Ñ—É–Ω–∫—Ü–∏—è–º–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.")
                add_faq_entry(
                    "–≤–∞–∫–∞–Ω—Å–∏–∏, —Ä–∞–±–æ—Ç–∞, –∫–∞—Ä—å–µ—Ä–∞",
                    "–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏?",
                    "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–í–∞–∫–∞–Ω—Å–∏–∏ üè¢'")
                add_faq_entry(
                    "–æ—Ç–∑—ã–≤, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, —Å–≤—è–∑—å",
                    "–ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞?",
                    "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω—É–∂–µ—Ä –ø–µ—Ä–µ–π—Ç–∏  –≤ —Ä–∞–∑–¥–µ–ª –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üìã" \
                    "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤.")
                add_faq_entry(
                    "—Å–∞–π—Ç, –∫–æ–º–ø–∞–Ω–∏—è, –æ –Ω–∞—Å",
                    "–ß—Ç–æ —Ç–∞–∫–æ–µ –†–æ–¥–∞–Ω–∏–∫–∞?",
                    "¬´–†–æ–¥–∞–Ω–∏–∫–∞¬ª ‚Äî –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤. " \
                    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∫–≤–∞—Å, –ø—É–Ω—à–∏ –∏ –≥–ª–∏–Ω—Ç–≤–µ–π–Ω—ã, –∫–æ–º–ø–æ—Ç—ã, –º–æ—Ä—Å—ã, —Å–æ–∫–∏ –∏ —á–∞–π. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ Rodanika –∏ –µ–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ø–æ –∞–¥—Ä–µ—Å—É: https://rodanika.ru/. \
                    –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∫–æ–º–∞–Ω–¥–µ –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º.")
                add_faq_entry(
                    "–ø—Ä–æ–±–ª–µ–º—ã, –æ—à–∏–±–∫–∞, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?",
                    "–ï—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –∫–∞–∫–æ–π-–ª–∏–±–æ –æ—à–∏–±–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. " \
                    "–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @devlifee. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ " \
                    "—Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—É—é —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.")                                                            
                add_faq_entry(
                    "—Ü–µ–ª—å –±–æ—Ç–∞, –∑–∞—á–µ–º, —Ñ—É–Ω–∫—Ü–∏–∏",
                    "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –¥–∞–Ω–Ω—ã–π –±–æ—Ç?",
                    "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –æ–∫–∞–∑–∞–Ω–∏—è –ø–æ–º–æ—â–∏ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º, —Ç–∞–∫ –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ Rodanika. –û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏. –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à—É –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ —É–¥–æ–±–Ω–µ–µ!")
                add_faq_entry(
                    "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞",
                    "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫ –∏ —á—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ?",
                    "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫ (–æ–±—Ä–∞–∑–µ—Ü –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å: "
                    "[—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Ä–∞–∑–µ—Ü –∑–∞—è–≤–ª–µ–Ω–∏—è]).\n2. –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ —Å –≤–∞—à–∏–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º.\n3." \
                    "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤ –∑–∞ [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π] –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞.\n4. "
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤.")

                add_faq_entry(
                    "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ",
                    "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç –∏ —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å?",
                    "–í —Å–ª—É—á–∞–µ –±–æ–ª–µ–∑–Ω–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n1. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –ª–∏—Å—Ç–∞.\n2." \
                    "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π] —Å–æ –¥–Ω—è –≤—ã–¥–∞—á–∏ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ –ª–∏—Å—Ç–∞.\n3. "
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ç–¥–µ–ª–æ–º –∫–∞–¥—Ä–æ–≤ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ/–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞].")

                print("–ü—Ä–∏–º–µ—Ä—ã FAQ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            else:
                print("–¢–∞–±–ª–∏—Ü–∞ FAQ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ.")
        else:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å–æ—Ä –ë–î, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è FAQ.")
        print("HR-–±–æ—Ç Rodanika –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        bot.infinity_polling(skip_pending=True, timeout=90, long_polling_timeout = 60) 
    except sqlite3.Error as db_err:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {db_err}")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
    finally:
        if conn:
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")
        print("HR-–±–æ—Ç Rodanika –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
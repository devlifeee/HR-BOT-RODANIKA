# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —è–∑—ã–∫–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤
#@bot.message_handler(func=lambda message: message.text == "–Ø–∑—ã–∫–æ–≤—ã–µ –∫—É—Ä—Å—ã")
#def handle_language_courses(message):
#    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#    markup.add("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–ù–µ–º–µ—Ü–∫–∏–π", "–î—Ä—É–≥–æ–π", "–ù–∞–∑–∞–¥")
#    
#    msg = bot.send_message(
#        message.chat.id,
#        "üåç <b>–ö–∞–∫–æ–π —è–∑—ã–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å?</b>",
#        parse_mode="HTML",
#        reply_markup=markup
#    )
#    set_user_state(message.from_user.id, "awaiting_language")
#    bot.register_next_step_handler(msg, process_language_choice)
#
#def process_language_choice(message):
#    if message.text == "–ù–∞–∑–∞–¥":
#        handle_skills_development(message)
#        return
#    
#    language = message.text
#    msg = bot.send_message(
#        message.chat.id,
#        f"üìù <b>–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —É –≤–∞—Å —Å–µ–π—á–∞—Å?</b>\n(–ù–∞—á–∏–Ω–∞—é—â–∏–π/–°—Ä–µ–¥–Ω–∏–π/–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)",
#        parse_mode="HTML",
#        reply_markup=types.ForceReply()
#    )
#    set_user_state(message.from_user.id, f"awaiting_level_{language}")
#    bot.register_next_step_handler(msg, lambda m: process_language_plan(m, language))

#def process_language_plan(message, language):
#    if message.text == "–ù–∞–∑–∞–¥":
#        handle_skills_development(message)
#        return
#    
#    level = message.text
#    prompt = f"""–°–æ—Å—Ç–∞–≤—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑—É—á–µ–Ω–∏—è {language} –¥–ª—è —É—Ä–æ–≤–Ω—è {level} —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ IT-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é. 
#–í–∫–ª—é—á–∏ —Ä–µ—Å—É—Ä—Å—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è."""
#    
#    response = ask_yandex_gpt(prompt)
#    
#    if not response:
#        response = f"""üìö <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏–∑—É—á–µ–Ω–∏—è {language} ({level}):</b>
#1. IT-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–∞ Coursera
#2. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º Duolingo
#3. –ß—Ç–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
#4. –ù–µ–¥–µ–ª—å–Ω—ã–µ —Å–ø—Ä–∏–Ω—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏"""
#    
#    bot.send_message(
#        message.chat.id,
#        response,
#        parse_mode="HTML",
#        reply_markup=create_back_button_keyboard()
#    )
#    set_user_state(message.from_user.id, None)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–∏–≥ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
#@bot.message_handler(func=lambda message: message.text == "–ö–Ω–∏–≥–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã")
#def handle_books_resources(message):
#    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#    markup.add("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "–î–∏–∑–∞–π–Ω", "–î—Ä—É–≥–æ–µ")
#    
#    msg = bot.send_message(
#        message.chat.id,
#        "üìö <b>–ö–∞–∫–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>",
#        parse_mode="HTML",
#        reply_markup=markup
#    )
#    set_user_state(message.from_user.id, "awaiting_topic")
#    bot.register_next_step_handler(msg, process_book_recommendations)
#
#def process_book_recommendations(message):
#    if message.text == "–ù–∞–∑–∞–¥":
#        handle_skills_development(message)
#        return
#    
#    topic = message.text
#    prompt = f"""–ü–æ–¥–±–µ—Ä–∏ 5 –ª—É—á—à–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ {topic} –¥–ª—è IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –í–∫–ª—é—á–∏:
#- 2 –∫–Ω–∏–≥–∏
#- 2 –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∞
#- 1 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–π –ø–æ–ª–µ–∑–Ω—ã–π —Ä–µ—Å—É—Ä—Å
#–î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."""
    
#    response = ask_yandex_gpt(prompt)
    
#    if not response:
#        response = f"""üìñ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ {topic}:</b>
#1. –ö–Ω–∏–≥–∞ "–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∫–æ–¥" - –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
#2. –ö—É—Ä—Å –Ω–∞ Stepik - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
#3. –ü–æ–¥–∫–∞—Å—Ç "Developer Tea" - –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
#    
#    bot.send_message(
#        message.chat.id,
#        response,
#        parse_mode="HTML",
#        reply_markup=create_back_button_keyboard()
#    )
#    set_user_state(message.from_user.id, None)

#–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ (–ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)
#@bot.message_handler(func=lambda message: message.text == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏")
#def handle_technical_skills(message):
#    msg = bot.send_message(
#        message.chat.id,
#        "üíª <b>–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è!\n\n"
#        "–ù–∞ –∫–∞–∫—É—é —Å–ø–µ—Ü–∏–∞–ª–Ω–æ—Å—Ç—å –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è?(–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–ª–∞–¥—á–∏–∫ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂, –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞, –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–ª–∞–¥–∞ –∏ –¥—Ä.)</b>",
#        parse_mode="HTML",
#        reply_markup=types.ForceReply()
#    )
#    set_user_state(message.from_user.id, "awaiting_tech_skill")
#    bot.register_next_step_handler(msg, process_technical_skills)
#
#def process_technical_skills(message):
#    if message.text == "–ù–∞–∑–∞–¥":
#        handle_skills_development(message)
#        return
#    
#    skill = message.text
#    msg = bot.send_message(
#        message.chat.id,
#        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ {skill}...",
#        reply_markup=types.ReplyKeyboardRemove()
#    )
#    
#    prompt = f"""–°–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {skill}. –í–∫–ª—é—á–∏:
#1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
#2. –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏
#–§–æ—Ä–º–∞—Ç: –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —ç–º–æ–¥–∑–∏"""
#    
#    response = ask_yandex_gpt(prompt)
#    
#    if not response:
#        response = f"""üöÄ <b>–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è {skill}:</b>
#1. –ò–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
#    
#    bot.send_message(
#        message.chat.id,
#        f"üìö <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ {skill}:</b>\n\n{response}",
#        parse_mode="HTML",
#        reply_markup=create_back_button_keyboard()
#    )
#    set_user_state(message.from_user.id, None)

#@bot.message_handler(func=lambda message: message.text == "–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤")
#def handle_skills_development(message):
#    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
#    markup.add(
#        #"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏",
#        #"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É",
#        #"–ö–Ω–∏–≥–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã",
#        "–ù–∞–∑–∞–¥"
#    )
#    
#    bot.send_message(
#        message.chat.id,
#        "üìö <b>–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Å –±–æ—Ç–∞ –†–æ–¥–∞–Ω–∏–∫–∞:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:</b>",
#        reply_markup=markup,
#        parse_mode="HTML"
#    )
